/************************************************************************
sondos Abdeen
*******************************************************************************/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
typedef  pair<int, int> iPair;
struct Graph
{
    int V, E;
    vector< pair<int, iPair> > edges;
    Graph(int V, int E)
    {
        this->V = V;
        this->E = E;
    }
    void addEdge(int u, int v, int w)
    {
        edges.push_back({w, {u, v}});
    }
    int kruskalMST();
};
struct DisjointSets
{
    int *parent, *rnk;
    int n;
    DisjointSets(int n)
    {
        this->n = n;
        parent = new int[n+1];
        rnk = new int[n+1];
        for (int i = 0; i <= n; i++)
        {
            rnk[i] = 0;
            parent[i] = i;
        }
    }
    int find(int u)
    {

        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }


    void merge(int x, int y)
    {
        x = find(x), y = find(y);

        if (rnk[x] > rnk[y])
            parent[y] = x;
        else
            parent[x] = y;

        if (rnk[x] == rnk[y])
            rnk[y]++;
    }
};

int Graph::kruskalMST()
{
    int mst_wt = 0;

    sort(edges.begin(), edges.end());

    DisjointSets ds(V);

    vector< pair<int, iPair> >::iterator it;
    for (it=edges.begin(); it!=edges.end(); it++)
    {
        int u = it->second.first;
        int v = it->second.second;

        int set_u = ds.find(u);
        int set_v = ds.find(v);

        if (set_u != set_v)
        {

            cout << u << " - " << v << endl;

            mst_wt += it->first;

            ds.merge(set_u, set_v);
        }
    }

    return mst_wt;
}

struct node
{
	int value;
	node* next;

};
node* start = NULL;
void start_node(node* temp)
{
	if (start == NULL)
		start = temp;
	node* p;
	p = start;
	start = temp;
	start->next = p;
}
void end_node(node* temp)
{
	if (start == NULL)
		start = temp;
	node* q;
	q = start;
	while (q->next != NULL)
		q = q->next;
	q->next = temp;
	temp->next = NULL;

}
void insert_after(int a, node* temp)
{
	node* q = start;

	for (int i = 1; i < a; i++)
		q = q->next;
	if (q == NULL)
	{
		cout << "the numer that you aded is biger than the number of nodes\n";
	}
	else
	{
		temp->next = q->next;
		q->next = temp;

	}

}
void delete_first_node()
{
	if (start == NULL)
		cout << "Error ... the list is Empty\n";
	else
	{
		node* temp = start;
		start = temp->next;
		delete temp;

	}
}
void delet_middle_node(int n)
{

	node* q = start;
	for (int i = 2; i < n; i++)
	{
		q = q->next;
		if (q == NULL)
			cout << "\n the node dosent found\n";
	}
	node* p = q->next;
	q->next = p->next;
	delete p;



}
void delete_end()
{
	if (start == NULL)
		cout << "the list is empty\n";
	else
	{
		node* q = start;
		while (q->next->next != NULL)
			q = q->next;
		node* p = q->next;
		q->next = NULL;
		delete p;
		cout << "the last node deleted succesfully\n";
	}

}
class intstack
{
private:
	int* stackarray;
	int stacksize;
	int top;
public:
	intstack(int);
	void push(int);
	void pop(int&);
	bool isfull(void);
	bool isempty(void);

};
intstack::intstack(int size)
{
	stackarray = new int[size];
	stacksize = size;
	top = -1;
}
void intstack::push(int num)
{
	if (isfull())
	{
		cout << "the stack is full\n";
	}
	else
	{
		top++;
		stackarray[top] = num;
	}
}
void intstack::pop(int& num)
{
	if (isempty())
	{
		cout << "the stack is emoty\n";
	}
	else
	{
		num = stackarray[top];
		top--;
	}
}
bool intstack::isfull(void)
{
	bool status;
	if (top == stacksize - 1)
		status = true;
	else
		status = false;
	return status;
}
bool intstack::isempty(void)
{
	bool status;
	if (top == -1)
		status = true;
	else
		status = false;
	return status;
}
class DynIntQueue
{
private:
	struct QueueNode
	{
		int value;
		QueueNode* next;
	};
	QueueNode* front;
	QueueNode* rear;
	int numItems;
public:
	DynIntQueue(void);
	void enqueue(int);
	void dequeue(int&);
	bool isEmpty(void);
};
DynIntQueue::DynIntQueue(void)
{
	front = NULL;
	rear = NULL;
	numItems = 0;
}
void DynIntQueue::enqueue(int num)
{
	QueueNode* newNode;
	newNode = new QueueNode;
	newNode->value = num;
	newNode->next = NULL;
	if (isEmpty())
	{
		front = newNode;
		rear = newNode;
	}
	else
	{
		rear->next = newNode;
		rear = newNode;
	}
	numItems++;
}
void DynIntQueue::dequeue(int& num)
{
	QueueNode* temp;
	if (isEmpty())
		cout << "The queue is empty.\n";
	else
	{
		num = front->value;
		temp = front->next;
		delete front;
		front = temp;
		numItems--;
	}
}
bool DynIntQueue::isEmpty(void)
{
	bool status;
	if (numItems)
		status = false;
	else
		status = true;
	return status;
}
int rfib(int a, int b, int n)
{
	if (n == 1)
		return a;
	else if (n == 2)
		return b;
	else
		return rfib(a, b, n - 1) + rfib(a, b, n - 2);


}
void movedisk( int n,int n1,int n3,int n2)
{
    if(n>0)
    {
         movedisk(n-1,n1,n2,n3);
         cout<<"mofe disk "<<n<<"from "<<n1<<"to "<<n3<<endl;
          movedisk(n-1,n2,n3,n1);
    }
}
int fact( int num)
{
    if (num==0)
    return 1;
    else
    return num*fact(num-1);
}
 void dec(int num,int base)
 {
     if(num>0)
     {
         dec(num/base,base);
         cout<<num%base;
     }
 }
 class dynamic
{
private:
	struct stacknode {
		int value;
		stacknode*next;

	};
	stacknode* top;
public:
	dynamic(void)
	{top= NULL;}
	void push(int);
		void pop(int&);
		bool isEmpty(void);
};

void dynamic::push(int num)
{
	stacknode*newnode;
	newnode = new stacknode;
	newnode->value = num;

	if (isEmpty())
	{
		top = newnode;
		newnode->next = NULL;
	}
	else
	{

		newnode->next = top;
		top = newnode;
	}
}
void dynamic::pop(int &num) {
	stacknode *temp;
	if (isEmpty())
	{
		cout << "The stack is empty.\n";
	}
	else
	{
		num = top->value;
		temp = top->next;
		delete top;
		top = temp;
	}
}
bool dynamic::isEmpty(void) { bool status;


if (!top)

status = true;

else

status = false;


return status; }
struct node_
{
	int value;
	node_ *next;
	node_ *previous;
};
node_ *start_ =NULL;

void insert_at_the_begining_DLL(node_ *p)
{
node_ *temp=start_;
start_ = p;
temp->previous=p;
p->next=temp;
}

void end_node_(node_* temp)
{
	if (start_ == NULL)
		start_ = temp;
	node_* q;
	q = start_;
	while (q->next != NULL)
		q = q->next;
	q->next = temp;
	temp->next = NULL;

}
void insert_after_(int a, node_* temp)
{
	node_* q = start_;

	for (int i = 1; i < a; i++)
		q = q->next;
	if (q == NULL)
	{
		cout << "the numer that you aded is biger than the number of nodes\n";
	}
	else
	{
		temp->next = q->next;
		q->next = temp;

	}

}
void delete_first_node_()
{
	if (start_ == NULL)
		cout << "Error ... the list is Empty\n";
	else
	{
		node_* temp = start_;
		start_ = temp->next;
		delete temp;

	}
}
void delet_middle_node_(int n)
{

	node_* q = start_;
	for (int i = 2; i < n; i++)
	{
		q = q->next;
		if (q == NULL)
			cout << "\n the node dosent found\n";
	}
	node_* p = q->next;
	q->next = p->next;
	delete p;



}
void delete_end_()
{
	if (start_ == NULL)
		cout << "the list is empty\n";
	else
	{
		node_* q = start_;
		while (q->next->next != NULL)
			q = q->next;
		node_* p = q->next;
		q->next = NULL;
		delete p;
		cout << "the last node deleted succesfully\n";
	}

}
class IntQueue
{
    private:
    int *queueArray;
    int queueSize;
    int front;
    int rear;
    int numItems;
    public:
    IntQueue(int);
    void enqueue(int);
    void dequeue(int &);
    bool isEmpty(void);
    bool isFull(void);

};
IntQueue::IntQueue(int s)
{
    queueArray = new int[s];
    queueSize = s;
    front = 0;
    rear = 0;
    numItems = 0;

}
void IntQueue::enqueue(int num)
{
    if (isFull())
    cout << "The queue is full.\n";
    else
    {
        	rear = (rear + 1) % queueSize;
        	queueArray[rear] = num;
        			numItems++;
        			}
}
void IntQueue::dequeue(int &num)
{
    if (isEmpty())
    cout << "The queue is empty.\n";
    else
    {
        		front = (front + 1) % queueSize;
        			num = queueArray[front];
        					numItems--;
        					}}
	bool IntQueue::isEmpty(void)
	{
	    bool status;
	    if (numItems)
	    status = false;
	    else
	    status = true;
	    return status;

	}
	bool IntQueue::isFull(void)
	{
	    bool status;
	    if (numItems < queueSize)
	    status = false;
	    else
	    status = true;
	    return status;

	}

int main()
{
    string l="yes";
	int k;
	cout << "\n\t\t\t\t*******welcome to my Program*******\n\t\t\t\t***********************************\n\n";
while(l=="yes")
	{
	cout << "*press 1 to choose the singly linked list\n";
	cout<<"*press 2 to choose the Doubly linked list\n";
		cout << "*press 3 to choose the static Stack\n";
cout<<"*press 4 to choose the Dynamic Stack\n";
	cout<<"*press 5 to choose the static Queue\n";
		cout << "*press 6 to choose the dynamic Queue \n";

	cout << "*press 7 to choose Fibonacci number \n";
	cout<<"*press 8 to choose the Tower of Hanoi Game\n";
	cout<<"*press 9 to choose the Factorial \n";
	cout<<"*press 10 to choose numbers Converting \n";
	cout<<"*press 11 to choose Minimum Spanning Tree using STL\n";
	cout<<"*press 0 to exit\n";
	cin >> k;
	switch (k)
	{
	    case 0:
	    break;
	case 1:
	{
		cout << "the link list now is: \n";
		int c;
		for (int i = 0; i < 10; i++)
		{
			node* curr = new node;
			curr->value = i;
			curr->next = start;
			start = curr;
			cout << curr->value << " ";
		}
		cout << endl;
		int v;
		cout << "*if you need to add a node press1\n*if you need to delete a node press 2\n";
		cin >> v;
		switch (v)
		{
		case 1:

		{
			int x;
			cout << "enter the value that you need to add to the new node\n";
			cin >> x;
			cout << "*if you need to add the node at the beginning press 1\n";
			cout << "*if you need to add the node at the end press2\n";
			cout << "*if you need to add a node in the middle press 3\n";
			cout << "*if you need to end press 0\n";
			cin >> c;
			node* temp = new node;
			temp->value = x;
			switch (c)
			{
			case 1:
				start_node(temp);
				break;
			case 2:
				end_node(temp);
				break;
			case 3:
				int a;
				cout << "insert the number of the node that you need to add the new node after it\n";
				cin >> a;
				insert_after(a, temp);
				break;
			case 0:
				break;

			}break;
		}
		case 2:
			int z;
			cout << "*if you need to delete the node at the beginning press 1\n";
			cout << "*if you need to delete the node at the middle press2\n";
			cout << "*if you need to delete the last node press 3\n";
			cout << "*if you need to end press 0\n";
			cin >> z;
			switch (z)
			{
			case 1:
				delete_first_node();
				break;
			case 2:
			{
				int n;
				cout << "enter the number of the node that you need to delete it\n";
				cin >> n;
				delet_middle_node(n);

			}break;
			case 3:

				delete_end();
				break;
			case 0:
				break;

			}
		}
		cout << "your singly link list now : \n";
		while (start)
		{
			cout << start->value << "  ";
			start = start->next;

		}
		cout<<endl;
	}
	break;
	case 3:
	{
		intstack stack(5);
		int catchv;
		cout << " pushing 1\n";
		stack.push(1);
		cout << " pushing 2\n";
		stack.push(2);
		cout << " pushing 3\n";
		stack.push(3);
		cout << " pushing 4\n";
		stack.push(4);
		cout << " pushing 5\n";
		stack.push(5);
		cout << "popping...\n";
		stack.pop(catchv);
		cout << catchv << endl;
		stack.pop(catchv);
		cout << catchv << endl;
		stack.pop(catchv);
		cout << catchv << endl;
		stack.pop(catchv);
		cout << catchv << endl;
		stack.pop(catchv);
		cout << catchv << endl;
	}break;

	case 6:
	{
		DynIntQueue iQueue;
		cout << "Enqueuing 5 items...\n";
		for (int x = 0; x < 5; x++)
			iQueue.enqueue(x);
		cout << "The values in the queue were:\n";
		while (!iQueue.isEmpty())
		{
			int value;
			iQueue.dequeue(value);
			cout << value << endl;
		}

	}break;
	case 7:
	{
		int a = 5; int b = 3; int n;
		cout << " a=5...b=3...press n\n";
		cin >> n;
		cout << "the answer is= " << rfib(a, b, n) << endl;
	}break;
	case 8:
	{
	int v=3;
	int a;
	int b;
	cout<<" the disks are in the first needle do you want to move them to the secound needle or to the third needle\n";
	cin>>a;
	if(a==2)
	b=3;
	else if(a==3)
	b=2;
	movedisk(v,1,a,b);}
	break;
	case 9:
	{
	int num;
	cout<<"prees an integer number\n";
	cin>>num;
	cout<<"the factorial for "<<num<<" = "<<fact(num)<<endl;}
	break;
	case 10:
	{
	int num;
	int base;
	cout<<" press the number that you need to convert it\n";
	cin>>num;
	cout<<"if you need to convert it to the binary system press 2...if you need to convert it to the eight system press 8 and so on\n";
	cin>>base;
	cout<<"the answer is = ";
   dec(num,base);
    cout<<endl;
	}
	break;
	case 11:
	{
	     int V = 9, E = 14;
    Graph g(V, E);


    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    cout << "Edges of MST are \n";
    int mst_wt = g.kruskalMST();

    cout << "\nWeight of MST is " << mst_wt<<endl;

	}break;
	case 4:
	{
		dynamic stack;
	int catchVar;
	cout << "Pushing 5\n";
	stack.push(5);


	cout << "Pushing 10\n";
	stack.push(10);

	cout << "Pushing 15\n";
	stack.push(15);
	cout << "Popping...\n";
	stack.pop(catchVar);

	cout << catchVar << endl;
	stack.pop(catchVar);

	cout << catchVar << endl;
	stack.pop(catchVar);

	cout << catchVar << endl;


	cout << "\nAttempting to pop again... ";
	stack.pop(catchVar);}break;
	case 2:
	{
	    cout<<"the linked list is \n";
	for(int i=1;i<=10;i++)
	{
		node_ *curr = new node_;
		curr->value=i;
		curr->next= start_;
		start_ = curr;
		cout<<curr->value<<" ";
	}
cout<<endl;
	int v;
		cout << "*if you need to add a node press1\n*if you need to delete a node press 2\n";
		cin >> v;
		switch (v)
		{
		case 1:

		{
			int x;
			cout << "enter the value that you need to add to the new node\n";
			cin >> x;
			cout << "*if you need to add the node at the beginning press 1\n";
			cout << "*if you need to add the node at the end press2\n";
			cout << "*if you need to add a node in the middle press 3\n";
			cout << "*if you need to end press 0\n";
			int c;
			cin >> c;
			node_* temp = new node_;
			temp->value = x;
			switch (c)
			{
			case 1:
				insert_at_the_begining_DLL(temp);
				break;
			case 2:
				end_node_(temp);
				break;
			case 3:
				int a;
				cout << "insert the number of the node that you need to add the new node after it\n";
				cin >> a;
				insert_after_(a, temp);
				break;
			case 0:
				break;

			}break;
		}
		case 2:
			int z;
			cout << "*if you need to delete the node at the beginning press 1\n";
			cout << "*if you need to delete the node at the middle press2\n";
			cout << "*if you need to delete the last node press 3\n";
			cout << "*if you need to end press 0\n";
			cin >> z;
			switch (z)
			{
			case 1:
				delete_first_node_();
				break;
			case 2:
			{
				int n;
				cout << "enter the number of the node that you need to delete it\n";
				cin >> n;
				delet_middle_node_(n);

			}break;
			case 3:

				delete_end_();
				break;
			case 0:
				break;

			}
		}
		cout << "your singly link list now : \n";

	while(start_)
	{
		cout<<start_->value<<" ";
		start_ = start_->next;
	}
	cout<<endl<<endl;
	}
	break;
	case 5:
	{int m;
	cout<<"how many Items would you to enqueue?\n";
	cin>>m;
	    IntQueue iQueue(m);
	    cout << "Enqueuing "<<m<<" items...\n";
	    	for (int x = 0; x < m; x++)
	    	iQueue.enqueue(x);
	    	cout << "Now attempting to enqueue again...\n";
	    	iQueue.enqueue(m);
	}break;
	}
	cout<<"Do you want to continue Yes Or No?\n";
	cin>>l;
	}

	cout<<" \t\t\t\t.....Thank YOU.......\n";
	cout<<"\t\t\t\tMade by sondos Abdeen. \n\t\t\t\t**Dr.Ahmad Hassasnah**\n";
	system("pasue");
	return 0;
}














